#!/usr/bin/env python
"""Builds all the models in ./services.

Run this with no args.  It will rebuild every model
in ./services and place them in botocore/data/aws/.
It will also copy the _services.json and _regions.json
into botocore/data/aws.

This script can probably be folded into scripts/buildmodel.

"""
import json
import os
import shutil
from subprocess import check_output

SERVICES_DIR = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'services')
BUILD_MODELS = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'modelbuild')
DEST_DIR = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
    'botocore', 'data', 'aws')

assert os.path.isdir(SERVICES_DIR)
assert os.path.isfile(BUILD_MODELS)
assert os.path.isdir(DEST_DIR)


def build_final_filename(filename):
    with open(filename, 'r') as json_file:
        data = json.load(json_file)

    service = os.path.basename(filename).replace('.json', '')
    filename = os.path.join(service, data['api_version'] + '.json')
    return os.path.join(DEST_DIR, filename)

for filename in os.listdir(SERVICES_DIR):
    service_filename = os.path.join(SERVICES_DIR, filename)
    if not os.path.isfile(service_filename):
        print("Skipping file: %s" % filename)
        continue
    if filename.startswith('_') and filename.endswith('.json'):
        # Copy it unchanged to the destination directory.
        dst = os.path.join(DEST_DIR, filename)
        print("Copying '%s' to '%s'" % (service_filename, dst))
        shutil.copyfile(src=service_filename, dst=dst)
    elif filename.endswith('.json') and filename.count('.') == 1:
        full_cmd = '%s %s' % (BUILD_MODELS, service_filename)
        print("Running command: %s" % full_cmd)
        new_model = check_output(full_cmd, shell=True).decode('utf-8')
        final_filename = build_final_filename(service_filename)
        try:
            # Ensure the directory is there if the service is new.
            os.makedirs(os.path.dirname(final_filename))
        except FileExistsError:
            pass
        with open(final_filename, 'w') as f:
            f.write(new_model)
